#! /usr/bin/env python3
import re
from pylab import *
from matplotlib.colors import LogNorm

name = 'fletcher16_cirs'

definition = '''/** @file jup_<name>.cpp"
  *
  * This file is automatically generated by make_jup_<name>.py
  *
  * @author Cheng Li
  */

// C/C++ header
#include <cmath>

// Athena++ header
#include "jup_<name>.hpp"
#include "../math/interpolation.h"

namespace Jupiter {
  int const fletcher16_nglat = <nglat>;
  int const fletcher16_npres = <npres>;
  int const <name>_dims[2] = {<nglat>, <npres>};
  double const <name>_coord[<ncoord>] = {
    <coord_array>
  };

  // interpolation function
  double get_temp_<name>(double glat, double pbar) {
    double temp;
    double coord[2] = {glat, log(pbar)};
    interpn(&temp, coord, <name>_temp[0], <name>_coord, <name>_dims, 2);
    return temp;
  }

  // planetographic latitude
  double const <name>_glat[<nglat>] = {
    <glat_array>
  };

  // pressure in bars
  double const <name>_pres[<npres>] = {
    <pres_array>
  };

  // 2D temperature 
  double const <name>_temp[<nglat>][<npres>] = {
    <temp_array>
  };
}
'''

declaration = '''#ifndef JUP_FLETCHER16_CIRS_HPP
#define JUP_FLETCHER16_CIRS_HPP

/** @file jup_<name>.hpp"
  *
  * This file is automatically generated by make_jup_<name>.py
  *
  * @author Cheng Li
  */
namespace Jupiter {
  extern int const <name>_npres;
  extern int const <name>_nglat;
  extern double const <name>_glat[];
  extern double const <name>_pres[];
  extern double const <name>_temp[][<npres>];
  double get_temp_<name>(double glat, double pbar);
}

#endif
'''

def read_section1(file, name):
  line = file.readline()
  count = 0
  while (not name in line) and (count < 1E5):
    line = file.readline()
    count += 1
  if count == 1E5: raise EOFError('cannot find ' + name)
  #print(int(line.split()[-1])/6., ceil(int(line.split()[-1])/6.))
  nrows = int(ceil(int(line.split()[-1])/6.))
  data = []
  for i in range(nrows):
    line = file.readline()
    data.extend(list(map(float, line.split())))
  return array(data)

def read_section2(file, name, nglat, npres):
  line = file.readline()
  count = 0
  while (not name in line) and (count < 1E5):
    line = file.readline()
    count += 1
  if count == 1E5: raise EOFError('cannot find ' + name)
  ndata = int(line.split()[-1])
  nrows = int(ceil(nglat/6.))
  data = []
  for i in range(npres):
    for j in range(nrows):
      line = file.readline()
      data.extend(list(map(float, line.split())))
    if i != npres - 1:
      file.readline()
  assert(len(data) == npres*nglat)
  return array(data).reshape(npres, nglat).T

with open('cirs2000.txt', 'r') as file:
  pres = read_section1(file, 'Pressure')
  npres = len(pres)
  glat = read_section1(file, 'Latitude')
  nglat = len(glat)
  temp = read_section2(file, 'Temperature', nglat, npres)

ix = argsort(glat)
glat = glat[ix]
temp = temp[ix][:]

X, Y = meshgrid(glat, pres)
figure(1, figsize = (12, 8))
ax = axes()
h = ax.contour(X, Y, temp.T, levels = linspace(110, 170, 13), cmap = 'Spectral_r')
ax.clabel(h, inline = 1, fontsize = 8, fmt = '%d')
ax.set_ylim([1., 0.001])
ax.set_xlim([70., -70.])
ax.set_yscale('log')
ax.set_ylabel('Pressure (bar)')
ax.set_xlabel('PG latitude (degree)')
ax.set_title('Jupiter CIRS temperatures (K)')

savefig('%s_temp.png' % name, bbox_inches = 'tight')

glat_array = ',\n    '.join([str(x) for x in glat])
pres_array = ',\n    '.join([str(x) for x in pres])
temp_array = ''
for i in range(nglat-1):
  temp_array += '{' + ','.join([str(x) for x in temp[i]]) + '},\n    '
temp_array += '{' + ','.join([str(x) for x in temp[nglat-1]]) + '}'
coord_array = ',\n    '.join([str(x) for x in glat] + [str(log(x)) for x in pres])

definition = re.sub('<name>', name, definition)
definition = re.sub('<npres>', str(npres), definition)
definition = re.sub('<nglat>', str(nglat), definition)
definition = re.sub('<ncoord>', str(nglat+npres), definition)
definition = re.sub('<coord_array>', coord_array, definition)
definition = re.sub('<glat_array>', glat_array, definition)
definition = re.sub('<pres_array>', pres_array, definition)
definition = re.sub('<temp_array>', temp_array, definition)
declaration = re.sub('<name>', name, declaration)
declaration = re.sub('<npres>', str(npres), declaration)

with open('jup_%s.cpp' % name, 'w') as file:
  file.write(definition)
with open('jup_%s.hpp' % name, 'w') as file:
  file.write(declaration)
